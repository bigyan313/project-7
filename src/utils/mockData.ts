import { TravelPlan, WeatherData, OutfitItem, Product } from '../types';

function extractDestinationAndDate(message: string): { destination: string; date: string } {
  // This is a simplified mock extraction
  // In a real app, this would be done by OpenAI API
  const destinations = ['London', 'Paris', 'New York', 'Los Angeles', 'Tokyo', 'Miami'];
  
  // Try to find a city in the message
  let destination = destinations.find(city => message.toLowerCase().includes(city.toLowerCase()));
  
  // If no city is found, default to a random one
  if (!destination) {
    destination = destinations[Math.floor(Math.random() * destinations.length)];
  }
  
  // Mock date extraction (would be done by OpenAI in real app)
  // Default to a date 7 days from now
  const travelDate = new Date();
  travelDate.setDate(travelDate.getDate() + 7);
  
  return {
    destination,
    date: travelDate.toISOString().split('T')[0],
  };
}

function generateMockWeather(destination: string, date: string): WeatherData {
  // Generate mock weather data based on destination
  // In a real app, this would come from OpenWeather API
  
  const weatherOptions = [
    {
      temperature: 75,
      description: 'sunny',
      icon: 'sun',
      details: { humidity: 45, windSpeed: 8, feelsLike: 78 }
    },
    {
      temperature: 65,
      description: 'partly cloudy',
      icon: 'cloud-sun',
      details: { humidity: 55, windSpeed: 10, feelsLike: 63 }
    },
    {
      temperature: 45,
      description: 'rainy',
      icon: 'cloud-rain',
      details: { humidity: 85, windSpeed: 15, feelsLike: 40 }
    },
    {
      temperature: 85,
      description: 'hot and clear',
      icon: 'sun',
      details: { humidity: 35, windSpeed: 5, feelsLike: 90 }
    }
  ];
  
  const randomWeather = weatherOptions[Math.floor(Math.random() * weatherOptions.length)];
  
  return {
    location: destination,
    date,
    ...randomWeather
  };
}

function generateMockOutfits(weather: WeatherData): OutfitItem[] {
  // Generate mock outfit recommendations based on weather
  // In a real app, this would be generated by OpenAI
  
  let outfits: OutfitItem[] = [];
  
  if (weather.temperature > 75) {
    // Hot weather outfits
    outfits = [
      {
        type: 'Lightweight Outfit',
        description: 'A breathable cotton t-shirt paired with lightweight shorts for maximum comfort in the heat.',
        searchQuery: 'summer lightweight cotton outfit',
        products: generateMockProducts('summer t-shirt')
      },
      {
        type: 'Sun Protection',
        description: 'A wide-brimmed hat and UV-blocking sunglasses to protect from intense sun.',
        searchQuery: 'sun protection hat sunglasses',
        products: generateMockProducts('sun hat')
      },
      {
        type: 'Evening Option',
        description: 'A light linen shirt and comfortable trousers for cooler evenings.',
        searchQuery: 'linen shirt summer evening',
        products: generateMockProducts('linen shirt')
      }
    ];
  } else if (weather.temperature > 60) {
    // Mild weather outfits
    outfits = [
      {
        type: 'Layered Casual',
        description: 'A light sweater over a t-shirt with comfortable jeans - perfect for variable weather.',
        searchQuery: 'light sweater casual outfit',
        products: generateMockProducts('light sweater')
      },
      {
        type: 'Light Jacket Option',
        description: 'A stylish light jacket that works for both day and evening temperatures.',
        searchQuery: 'spring light jacket',
        products: generateMockProducts('light jacket')
      },
      {
        type: 'Versatile Footwear',
        description: 'Comfortable walking shoes that are stylish enough for various activities.',
        searchQuery: 'comfortable walking shoes fashion',
        products: generateMockProducts('walking shoes')
      }
    ];
  } else {
    // Cold weather outfits
    outfits = [
      {
        type: 'Warm Layers',
        description: 'A thermal base layer under a warm sweater keeps you comfortable in cold weather.',
        searchQuery: 'thermal layer winter sweater',
        products: generateMockProducts('thermal sweater')
      },
      {
        type: 'Winter Coat',
        description: 'A insulated winter coat that blocks wind and keeps you warm.',
        searchQuery: 'insulated winter coat',
        products: generateMockProducts('winter coat')
      },
      {
        type: 'Cold Weather Accessories',
        description: 'A warm hat, scarf, and gloves set to protect extremities from the cold.',
        searchQuery: 'winter hat scarf gloves set',
        products: generateMockProducts('winter accessories')
      }
    ];
  }
  
  // Add rain items if weather is rainy
  if (weather.description.includes('rain')) {
    outfits.push({
      type: 'Rain Protection',
      description: 'A waterproof jacket and umbrella to stay dry during showers.',
      searchQuery: 'waterproof rain jacket',
      products: generateMockProducts('rain jacket')
    });
  }
  
  return outfits;
}

function generateMockProducts(searchQuery: string): Product[] {
  // In a real app, this would come from Google Programmable Search
  const stores = ['Macy\'s', 'Target', 'Forever21'];
  const products = [];
  
  for (let i = 0; i < 3; i++) {
    const store = stores[i % stores.length];
    products.push({
      title: `${searchQuery.charAt(0).toUpperCase() + searchQuery.slice(1)} - Style ${i + 1}`,
      link: 'https://example.com/product',
      image: `https://source.unsplash.com/100x100/?${encodeURIComponent(searchQuery)}`,
      price: `$${Math.floor(Math.random() * 70) + 20}.99`,
      store
    });
  }
  
  return products;
}

export function generateMockData(message: string): TravelPlan {
  const { destination, date } = extractDestinationAndDate(message);
  const weather = generateMockWeather(destination, date);
  const outfits = generateMockOutfits(weather);
  
  return {
    id: Math.random().toString(36).substring(2, 9),
    destination,
    date,
    weather,
    outfits,
    status: 'success'
  };
}